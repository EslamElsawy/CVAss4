import cv2
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.image as mpimg

# Manually identifies corresponding points from two views
def getCorrespondence(imageA, imageB):
  # Display images, select matching points
	fig = plt.figure()
	figA = fig.add_subplot(1,2,1)
	figB = fig.add_subplot(1,2,2)
	# Display the image
	figA.imshow(imageA,origin='lower')
	figB.imshow(imageB,origin='lower')
	plt.axis('image')
	pts = plt.ginput(n=8, timeout=0)
	pts = np.reshape(pts, (2, 4, 2))
	return pts

if __name__ == "__main__":
	# Read image file names
#	fileA = raw_input("uttower1.jpg")
#	fileB = raw_input("uttower2.jpg")
#	imageA = mpimg.imread(fileA)
#	imageB = mpimg.imread(fileB)
	imageA = mpimg.imread('imageA.jpg')
	imageB = mpimg.imread('imageB.jpg')
	pts = getCorrespondence(imageA, imageB)
	print pts
	
#Step 1: Find H
p1old=pts[0][0];
p2old=pts[0][1];
p3old=pts[0][2]
p4old=pts[0][3];
p1new=pts[1][0];
p2new=pts[1][1];
p3new=pts[1][2];
p4new=pts[1][3];

xo1=p1old[0];
yo1=p1old[1];
xo2=p2old[0];
yo2=p2old[1];
xo3=p3old[0];
yo3=p3old[1];
xo4=p4old[0];
yo4=p4old[1];

xn1=p1new[0];
yn1=p1new[1];
xn2=p2new[0];
yn2=p2new[1];
xn3=p3new[0];
yn3=p3new[1];
xn4=p4new[0];
yn4=p4new[1];

A= np.array([
			[xo1,yo1,1,0,0,0,-xo1*xn1,-yo1*xn1],
			[0,0,0,xo1,yo1,1,-xo1*yn1,-yo1*yn1],
			[xo2,yo2,1,0,0,0,-xo2*xn2,-yo2*xn2],
			[0,0,0,xo2,yo2,1,-xo2*yn2,-yo2*yn2],
			[xo3,yo3,1,0,0,0,-xo3*xn3,-yo3*xn3],
			[0,0,0,xo3,yo3,1,-xo3*yn3,-yo3*yn3],
			[xo4,yo4,1,0,0,0,-xo4*xn4,-yo4*xn4],
			[0,0,0,xo4,yo4,1,-xo4*yn4,-yo4*yn4],
			]);
B = np.array([xn1,yn1,xn2,yn2,xn3,yn3,xn4,yn4]);

H = np.linalg.lstsq(A, B)[0];
H = np.append(H,1);

print 'H'
H =H.reshape((3,3))
print H

#check H
pold = np.array([
	[p1old[0]],
	[p1old[1]],
	[1]
	])
print H.shape
print pold.shape
pnew = np.dot(H,pold)
print pold
print pnew
print pnew[0]/pnew[2];
print pnew[1]/pnew[2];
