import cv2;
from cv2 import cv;
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.image as mpimg
from matplotlib.pyplot import imshow


# Manually identifies corresponding points from two views
def getCorrespondence(imageA, imageB):
  # Display images, select matching points
	fig = plt.figure()
	figA = fig.add_subplot(1,2,1)
	figB = fig.add_subplot(1,2,2)
	# Display the image
	figA.imshow(imageA)
	figB.imshow(imageB)
	plt.axis('image')
	pts = plt.ginput(n=8, timeout=0)
	pts = np.reshape(pts, (2, 4, 2))
	
	plt.close();
	return pts

if __name__ == "__main__":
	# Read image file names
#	fileA = raw_input("uttower1.jpg")
#	fileB = raw_input("uttower2.jpg")
#	imageA = mpimg.imread(fileA)
#	imageB = mpimg.imread(fileB)
	imageA = mpimg.imread('imageA.jpg')
	imageB = mpimg.imread('imageB.jpg')
	print imageA.shape
	print imageB.shape
	pts = getCorrespondence(imageA, imageB)
	print pts
	
#Step 1: Find H
p1old=pts[0][0];
p2old=pts[0][1];
p3old=pts[0][2]
p4old=pts[0][3];
p1new=pts[1][0];
p2new=pts[1][1];
p3new=pts[1][2];
p4new=pts[1][3];

xo1=p1old[0];
yo1=p1old[1];
xo2=p2old[0];
yo2=p2old[1];
xo3=p3old[0];
yo3=p3old[1];
xo4=p4old[0];
yo4=p4old[1];

xn1=p1new[0];
yn1=p1new[1];
xn2=p2new[0];
yn2=p2new[1];
xn3=p3new[0];
yn3=p3new[1];
xn4=p4new[0];
yn4=p4new[1];

A= np.array([
			[xo1,yo1,1,0,0,0,-xo1*xn1,-yo1*xn1],
			[0,0,0,xo1,yo1,1,-xo1*yn1,-yo1*yn1],
			[xo2,yo2,1,0,0,0,-xo2*xn2,-yo2*xn2],
			[0,0,0,xo2,yo2,1,-xo2*yn2,-yo2*yn2],
			[xo3,yo3,1,0,0,0,-xo3*xn3,-yo3*xn3],
			[0,0,0,xo3,yo3,1,-xo3*yn3,-yo3*yn3],
			[xo4,yo4,1,0,0,0,-xo4*xn4,-yo4*xn4],
			[0,0,0,xo4,yo4,1,-xo4*yn4,-yo4*yn4],
			]);
B = np.array([xn1,yn1,xn2,yn2,xn3,yn3,xn4,yn4]);

H = np.linalg.lstsq(A, B)[0];
H = np.append(H,1);

print 'H'
H =H.reshape((3,3))
print H

#check H
pold = np.array([
	[p1old[0]],
	[p1old[1]],
	[1]
	])
print H.shape
print pold.shape
pnew = np.dot(H,pold)
print pold
print pnew
print pnew[0]/pnew[2];
print pnew[1]/pnew[2];

#Step 2: 
BHieght=imageB.shape[0]
BWidth=imageB.shape[1]
AHieght=imageA.shape[0]
AWidth=imageA.shape[1]
#convert the conrner points
#point 1
print 'point 1'
uleft = np.array([
	[0],
	[0],
	[1]
	]) 

uleftnew = np.dot(H,uleft);
uleftX= uleftnew[0]/uleftnew[2];
uleftY= uleftnew[1]/uleftnew[2];
#point 2
print 'point 2'
uright = np.array([
	[0],
	[BWidth],
	[1]
	])
urightnew = np.dot(H,uright);
urightX= urightnew[0]/urightnew[2]
urightY= urightnew[1]/urightnew[2]
#point 3
print 'point 3'
lleft = np.array([
	[BHieght],
	[0],
	[1]
	])
lleftnew = np.dot(H,lleft);
lleftX= lleftnew[0]/lleftnew[2];
lleftY= lleftnew[1]/lleftnew[2];
#point 4
print 'point 4'
lright = np.array([
	[BHieght],
	[BWidth],
	[1]
	])
lrightnew = np.dot(H,lright);
lrightX= lrightnew[0]/lrightnew[2];
lrightY= lrightnew[1]/lrightnew[2];

#calculate the size of the traslated image
minX = int(min(uleftX,urightX,lleftX,lrightX));
minY = int(min(uleftY,lleftY,urightY,lrightY));
maxX = int (max(uleftX,urightX,lleftX,lrightX));
maxY = int(max(uleftY,lleftY,urightY,lrightY));
print 'corners'
print int(minX);
print int(minY);
print int(maxX);
print int(maxY);
print 'Size'
modBHeight= maxX-minX;
modBWidth= maxY-minY;
print modBHeight;
print modBWidth;

#Start forming image B'
modB = np.zeros(shape=(modBHeight,modBWidth,3));
#modB = cv.CreateMat(modBHeight, modBWidth, cv2.CV_8UC3);



HMatrix = np.asmatrix(H);
HMatrixInverse = HMatrix.I;
print 'strat'
for i in range(minX,maxX):
	print i
	print maxX
	for j in range(minY,maxY):
		pBnew = np.array([
		[i],
		[j],
		[1]
		]);
		pBold = np.dot(HMatrixInverse,pBnew);
		pBX = int(pBold[0]/pBold[2]);
		pBY = int(pBold[1]/pBold[2]);
		if(pBX>=0 and pBX<BHieght and pBY>=0 and pBY<BWidth):
			modB[i-minX][j-minY][0] = imageB[pBX][pBY][2];
			modB[i-minX][j-minY][1] = imageB[pBX][pBY][1];
			modB[i-minX][j-minY][2] = imageB[pBX][pBY][0];

	
plt.imshow(modB);
cv2.imwrite('modB.jpg', modB)
plt.show();

#Forward Wraping
#modB = np.zeros(shape=(1000,1000,3));
#for i in range(0,BHieght):
#	for j in range(0,BWidth):
#		pBold = np.array([
#						[i],
#						[j],
#						[1],
#						]);
#		pBnew = np.dot(H,pBold);
#		pBX = int(pBnew[0]/pBnew[2]);
#		pBY = int(pBnew[1]/pBnew[2]);
#		modB[pBX][pBY][0]= imageB[i][j][0];
#		modB[pBX][pBY][1]= imageB[i][j][1];
#		modB[pBX][pBY][2]= imageB[i][j][2];
#plt.imshow(modB);
#cv2.imwrite('output.jpg', modB)
#plt.show();


#Step 4: overlapping
guideB = np.array([
		[xn1],
		[yn1],
		[1]
		]);
guideBmod = np.dot(H,guideB);
guideBmodX = int(guideBmod[0]/guideBmod[2]);
guideBmodY = int(guideBmod[1]/guideBmod[2]);

toTop = int(max(guideBmodX,xo1));
toBottom = int(max(modBHeight-guideBmodX, AHieght-xo1));
toLeft = int(max(guideBmodY,yo1));
toRight = int(max(AWidth-yo1,modBWidth-guideBmodY));

combinedHeight = toTop+toBottom;
combinedWidth = toLeft+toRight;

#create combined image
combined = np.zeros(shape=(combinedHeight,combinedWidth,3));


#fill combined with modified image
k=-1;
for i in range(toTop-guideBmodX,toTop-guideBmodX+modBHeight):
	k=k+1;
	l=-1;
	for j in range(toLeft-guideBmodY,toLeft-guideBmodY+modBWidth):
		l=l+1;
		combined[i][j]=modB[k][l];
#fill combined with first image
k=-1;
for i in range(int(toTop-xo1),int(toTop-xo1+AHieght)):
	k=k+1;
	l=-1;
	for j in range(int(toLeft-yo1),int(toLeft-yo1+AWidth)):
		l=l+1;
		combined[i][j]=imageA[k][l];
		
cv2.imwrite('Output.jpg', combined)
plt.show();





print 'Finish'
print imageA.shape
print modB.shape
